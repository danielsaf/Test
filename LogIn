package test;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.Assert;
import org.testng.AssertJUnit;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver; 

public class LogIn {
	  private WebDriver driver;
	  private String baseUrl;
	  private StringBuffer verificationErrors = new StringBuffer();

	  @BeforeMethod
	public void setUp() throws Exception {
	    driver = new FirefoxDriver();
	    baseUrl = "http://testhomework.wikia.com";
	    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	  }

	  @Test
	public void testLogIn() throws Exception {
	    driver.get(baseUrl + "/wiki/User:TestDaniel");
	    driver.findElement(By.linkText("Log in")).click();
	    try {
	      AssertJUnit.assertTrue(isElementPresent(By.id("UserLoginDropdown")));
	    } catch (Error e) {
	      verificationErrors.append(e.toString());
	    }
	    driver.findElement(By.name("username")).clear();
	    driver.findElement(By.name("username")).sendKeys("TestDaniel");
	    driver.findElement(By.name("password")).clear();
	    driver.findElement(By.name("password")).sendKeys("Test123");
	    driver.findElement(By.cssSelector("input.login-button")).click();
	    try {
	      AssertJUnit.assertEquals("TestDaniel", driver.findElement(By.linkText("TestDaniel")).getText());
	    } catch (Error e) {
	      verificationErrors.append(e.toString());
	    }
	    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | null | ]]
	    driver.findElement(By.linkText("TestDaniel")).click();
	    driver.findElement(By.linkText("Log out")).click();
	  }

	  @AfterMethod
	public void tearDown() throws Exception {
	    driver.quit();
	    String verificationErrorString = verificationErrors.toString();
	    if (!"".equals(verificationErrorString)) {
	      Assert.fail(verificationErrorString);
	    }
	  }

	  private boolean isElementPresent(By by) {
	    try {
	      driver.findElement(by);
	      return true;
	    } catch (NoSuchElementException e) {
	      return false;
	    }
	  }
  }





